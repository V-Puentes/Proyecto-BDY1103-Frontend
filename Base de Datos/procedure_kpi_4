CREATE OR REPLACE PROCEDURE PROC_KPI4_STOCK_CATEGORIA IS

    -- Tipos para almacenar datos de stock
    TYPE tipo_stock_categoria IS TABLE OF NUMBER INDEX BY VARCHAR2(50);
    TYPE tipo_contador_productos IS TABLE OF NUMBER INDEX BY VARCHAR2(50);
    TYPE tipo_productos_bajo_stock IS TABLE OF NUMBER INDEX BY VARCHAR2(50);
    
    -- Variables para stock actual
    V_STOCK_ACTUAL tipo_stock_categoria;
    V_PRODUCTOS_POR_CATEGORIA tipo_contador_productos;
    V_PRODUCTOS_BAJO_STOCK tipo_productos_bajo_stock;
    
    -- Variables para stock anterior (desde la última ejecución)
    V_STOCK_ANTERIOR tipo_stock_categoria;
    
    -- Variables de trabajo
    V_FRANQUICIA PRODUCTO.FRANQUICIA_PRO%TYPE;
    V_STOCK PRODUCTO.STOCK%TYPE;
    V_CATEGORIA VARCHAR2(50);
    
    -- Variables para cálculos
    V_VARIACION_STOCK NUMBER;
    V_VARIACION_PORCENTAJE NUMBER(10,2);
    V_ESTADO_STOCK VARCHAR2(20);
    V_UMBRAL_MINIMO NUMBER;
    V_TOTAL_PRODUCTOS NUMBER := 0;
    
    -- Lista de categorías (franquicias)
    TYPE tipo_categorias IS TABLE OF VARCHAR2(50);
    V_CATEGORIAS tipo_categorias;
    
    -- Cursor para productos actuales
    CURSOR C_PRODUCTOS IS
        SELECT FRANQUICIA_PRO, STOCK
        FROM PRODUCTO;
    
    -- Cursor para obtener stock anterior desde KPI_4
    CURSOR C_STOCK_ANTERIOR IS
        SELECT CATEGORIA, STOCK_ACTUAL AS STOCK_ANTERIOR
        FROM KPI_4
        WHERE FECHA_ACTUALIZACION = (SELECT MAX(FECHA_ACTUALIZACION) FROM KPI_4);

BEGIN
    -- Inicializar contadores
    V_STOCK_ACTUAL.DELETE;
    V_PRODUCTOS_POR_CATEGORIA.DELETE;
    V_PRODUCTOS_BAJO_STOCK.DELETE;
    V_STOCK_ANTERIOR.DELETE;
    
    -- Obtener categorías únicas
    BEGIN
        SELECT DISTINCT FRANQUICIA_PRO
        BULK COLLECT INTO V_CATEGORIAS
        FROM PRODUCTO
        ORDER BY FRANQUICIA_PRO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_CATEGORIAS := tipo_categorias();
    END;
    
    -- Inicializar categorías
    FOR I IN 1..V_CATEGORIAS.COUNT LOOP
        V_STOCK_ACTUAL(V_CATEGORIAS(I)) := 0;
        V_PRODUCTOS_POR_CATEGORIA(V_CATEGORIAS(I)) := 0;
        V_PRODUCTOS_BAJO_STOCK(V_CATEGORIAS(I)) := 0;
    END LOOP;
    
    -- Cargar stock anterior desde la última ejecución
    FOR REGISTRO IN C_STOCK_ANTERIOR LOOP
        V_STOCK_ANTERIOR(REGISTRO.CATEGORIA) := REGISTRO.STOCK_ANTERIOR;
    END LOOP;
    
    -- Procesar productos actuales
    FOR REGISTRO IN C_PRODUCTOS LOOP
        V_CATEGORIA := REGISTRO.FRANQUICIA_PRO;
        V_STOCK := REGISTRO.STOCK;
        
        -- Acumular stock por categoría
        V_STOCK_ACTUAL(V_CATEGORIA) := NVL(V_STOCK_ACTUAL(V_CATEGORIA), 0) + V_STOCK;
        V_PRODUCTOS_POR_CATEGORIA(V_CATEGORIA) := NVL(V_PRODUCTOS_POR_CATEGORIA(V_CATEGORIA), 0) + 1;
        V_TOTAL_PRODUCTOS := V_TOTAL_PRODUCTOS + 1;
        
        -- Contar productos con stock bajo (menos de 10 unidades)
        IF V_STOCK < 10 THEN
            V_PRODUCTOS_BAJO_STOCK(V_CATEGORIA) := NVL(V_PRODUCTOS_BAJO_STOCK(V_CATEGORIA), 0) + 1;
        END IF;
    END LOOP;
    
    -- Procesar y guardar resultados por categoría
    FOR I IN 1..V_CATEGORIAS.COUNT LOOP
        V_CATEGORIA := V_CATEGORIAS(I);
        
        -- Calcular variación
        IF V_STOCK_ANTERIOR.EXISTS(V_CATEGORIA) AND V_STOCK_ANTERIOR(V_CATEGORIA) > 0 THEN
            V_VARIACION_STOCK := V_STOCK_ACTUAL(V_CATEGORIA) - V_STOCK_ANTERIOR(V_CATEGORIA);
            V_VARIACION_PORCENTAJE := (V_VARIACION_STOCK / V_STOCK_ANTERIOR(V_CATEGORIA)) * 100;
        ELSE
            V_VARIACION_STOCK := NULL;
            V_VARIACION_PORCENTAJE := NULL;
        END IF;
        
        -- Determinar umbral mínimo (10% del stock promedio por producto)
        IF V_PRODUCTOS_POR_CATEGORIA(V_CATEGORIA) > 0 THEN
            V_UMBRAL_MINIMO := ROUND((V_STOCK_ACTUAL(V_CATEGORIA) / V_PRODUCTOS_POR_CATEGORIA(V_CATEGORIA)) * 0.1);
            V_UMBRAL_MINIMO := GREATEST(V_UMBRAL_MINIMO, 5); -- Mínimo 5 unidades
        ELSE
            V_UMBRAL_MINIMO := 5;
        END IF;
        
        -- Determinar estado del stock
        IF V_STOCK_ACTUAL(V_CATEGORIA) = 0 THEN
            V_ESTADO_STOCK := 'AGOTADO';
        ELSIF V_STOCK_ACTUAL(V_CATEGORIA) <= V_UMBRAL_MINIMO THEN
            V_ESTADO_STOCK := 'CRÍTICO';
        ELSIF V_PRODUCTOS_BAJO_STOCK(V_CATEGORIA) > (V_PRODUCTOS_POR_CATEGORIA(V_CATEGORIA) * 0.3) THEN
            V_ESTADO_STOCK := 'BAJO';
        ELSE
            V_ESTADO_STOCK := 'NORMAL';
        END IF;
        
        -- Insertar/actualizar KPI_4
        MERGE INTO KPI_4 k
        USING (
            SELECT V_CATEGORIA AS CATEGORIA,
                   V_STOCK_ACTUAL(V_CATEGORIA) AS STOCK_ACTUAL,
                   NVL(V_STOCK_ANTERIOR(V_CATEGORIA), V_STOCK_ACTUAL(V_CATEGORIA)) AS STOCK_ANTERIOR,
                   V_VARIACION_STOCK AS VARIACION_STOCK,
                   V_VARIACION_PORCENTAJE AS VARIACION_PORCENTAJE,
                   V_ESTADO_STOCK AS ESTADO_STOCK,
                   V_UMBRAL_MINIMO AS UMBRAL_MINIMO,
                   NVL(V_PRODUCTOS_BAJO_STOCK(V_CATEGORIA), 0) AS PRODUCTOS_BAJO_STOCK,
                   V_PRODUCTOS_POR_CATEGORIA(V_CATEGORIA) AS TOTAL_PRODUCTOS,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.CATEGORIA = src.CATEGORIA AND k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION)
        WHEN MATCHED THEN
            UPDATE SET 
                k.STOCK_ACTUAL = src.STOCK_ACTUAL,
                k.STOCK_ANTERIOR = src.STOCK_ANTERIOR,
                k.VARIACION_STOCK = src.VARIACION_STOCK,
                k.VARIACION_PORCENTAJE = src.VARIACION_PORCENTAJE,
                k.ESTADO_STOCK = src.ESTADO_STOCK,
                k.UMBRAL_MINIMO = src.UMBRAL_MINIMO,
                k.PRODUCTOS_BAJO_STOCK = src.PRODUCTOS_BAJO_STOCK,
                k.TOTAL_PRODUCTOS = src.TOTAL_PRODUCTOS
        WHEN NOT MATCHED THEN
            INSERT (KPI_4_ID, CATEGORIA, STOCK_ACTUAL, STOCK_ANTERIOR, VARIACION_STOCK, 
                    VARIACION_PORCENTAJE, ESTADO_STOCK, UMBRAL_MINIMO, PRODUCTOS_BAJO_STOCK, 
                    TOTAL_PRODUCTOS, FECHA_ACTUALIZACION)
            VALUES (KPI_4_SEQ.NEXTVAL, src.CATEGORIA, src.STOCK_ACTUAL, src.STOCK_ANTERIOR, 
                    src.VARIACION_STOCK, src.VARIACION_PORCENTAJE, src.ESTADO_STOCK, 
                    src.UMBRAL_MINIMO, src.PRODUCTOS_BAJO_STOCK, src.TOTAL_PRODUCTOS, 
                    src.FECHA_ACTUALIZACION);
    END LOOP;
    
    -- Insertar registro de resumen general
    DECLARE
        V_TOTAL_STOCK_ACTUAL NUMBER := 0;
        V_TOTAL_STOCK_ANTERIOR NUMBER := 0;
        V_TOTAL_PRODUCTOS_BAJO_STOCK NUMBER := 0;
        V_TOTAL_CATEGORIAS NUMBER := V_CATEGORIAS.COUNT;
    BEGIN
        -- Calcular totales
        FOR I IN 1..V_CATEGORIAS.COUNT LOOP
            V_TOTAL_STOCK_ACTUAL := V_TOTAL_STOCK_ACTUAL + V_STOCK_ACTUAL(V_CATEGORIAS(I));
            V_TOTAL_STOCK_ANTERIOR := V_TOTAL_STOCK_ANTERIOR + NVL(V_STOCK_ANTERIOR(V_CATEGORIAS(I)), 0);
            V_TOTAL_PRODUCTOS_BAJO_STOCK := V_TOTAL_PRODUCTOS_BAJO_STOCK + NVL(V_PRODUCTOS_BAJO_STOCK(V_CATEGORIAS(I)), 0);
        END LOOP;
        
        -- Calcular variación general
        IF V_TOTAL_STOCK_ANTERIOR > 0 THEN
            V_VARIACION_STOCK := V_TOTAL_STOCK_ACTUAL - V_TOTAL_STOCK_ANTERIOR;
            V_VARIACION_PORCENTAJE := (V_VARIACION_STOCK / V_TOTAL_STOCK_ANTERIOR) * 100;
        ELSE
            V_VARIACION_STOCK := NULL;
            V_VARIACION_PORCENTAJE := NULL;
        END IF;
        
        -- Determinar estado general del stock
        IF V_TOTAL_PRODUCTOS_BAJO_STOCK > (V_TOTAL_PRODUCTOS * 0.2) THEN
            V_ESTADO_STOCK := 'ALERTA GENERAL';
        ELSE
            V_ESTADO_STOCK := 'NORMAL';
        END IF;
        
        -- Insertar resumen general
        MERGE INTO KPI_4 k
        USING (
            SELECT 'TOTAL GENERAL' AS CATEGORIA,
                   V_TOTAL_STOCK_ACTUAL AS STOCK_ACTUAL,
                   V_TOTAL_STOCK_ANTERIOR AS STOCK_ANTERIOR,
                   V_VARIACION_STOCK AS VARIACION_STOCK,
                   V_VARIACION_PORCENTAJE AS VARIACION_PORCENTAJE,
                   V_ESTADO_STOCK AS ESTADO_STOCK,
                   0 AS UMBRAL_MINIMO,
                   V_TOTAL_PRODUCTOS_BAJO_STOCK AS PRODUCTOS_BAJO_STOCK,
                   V_TOTAL_PRODUCTOS AS TOTAL_PRODUCTOS,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.CATEGORIA = src.CATEGORIA AND k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION)
        WHEN MATCHED THEN
            UPDATE SET 
                k.STOCK_ACTUAL = src.STOCK_ACTUAL,
                k.STOCK_ANTERIOR = src.STOCK_ANTERIOR,
                k.VARIACION_STOCK = src.VARIACION_STOCK,
                k.VARIACION_PORCENTAJE = src.VARIACION_PORCENTAJE,
                k.ESTADO_STOCK = src.ESTADO_STOCK,
                k.PRODUCTOS_BAJO_STOCK = src.PRODUCTOS_BAJO_STOCK,
                k.TOTAL_PRODUCTOS = src.TOTAL_PRODUCTOS
        WHEN NOT MATCHED THEN
            INSERT (KPI_4_ID, CATEGORIA, STOCK_ACTUAL, STOCK_ANTERIOR, VARIACION_STOCK, 
                    VARIACION_PORCENTAJE, ESTADO_STOCK, UMBRAL_MINIMO, PRODUCTOS_BAJO_STOCK, 
                    TOTAL_PRODUCTOS, FECHA_ACTUALIZACION)
            VALUES (KPI_4_SEQ.NEXTVAL, src.CATEGORIA, src.STOCK_ACTUAL, src.STOCK_ANTERIOR, 
                    src.VARIACION_STOCK, src.VARIACION_PORCENTAJE, src.ESTADO_STOCK, 
                    src.UMBRAL_MINIMO, src.PRODUCTOS_BAJO_STOCK, src.TOTAL_PRODUCTOS, 
                    src.FECHA_ACTUALIZACION);
    END;
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('KPI_4 - Stock por categoría calculado exitosamente.');
    DBMS_OUTPUT.PUT_LINE('Total categorías procesadas: ' || V_CATEGORIAS.COUNT);
    
EXCEPTION
    WHEN OTHERS THEN 
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en KPI_4: ' || SQLERRM);
        RAISE;
END PROC_KPI4_STOCK_CATEGORIA;
/

CREATE OR REPLACE PROCEDURE PROC_KPI2_VENTAS IS

    -- Variables para ventas mensuales
    TYPE tipo_ventas_mes IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
    V_VENTAS_MES tipo_ventas_mes;
    V_VENTAS_SIN_IVA_MES tipo_ventas_mes;
    V_IVA_MES tipo_ventas_mes;
    V_CANTIDAD_VENTAS_MES tipo_ventas_mes;
    
    -- Variables para ventas anuales
    TYPE tipo_ventas_anio IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
    V_VENTAS_ANIO tipo_ventas_anio;
    V_VENTAS_SIN_IVA_ANIO tipo_ventas_anio;
    V_IVA_ANIO tipo_ventas_anio;
    V_CANTIDAD_VENTAS_ANIO tipo_ventas_anio;
    
    -- Variables de trabajo
    V_FECHA_COM COMPRA.FECHA_COM%TYPE;
    V_TOTAL_CON_IVA COMPRA.TOTAL_CON_IVA%TYPE;
    V_TOTAL_SIN_IVA COMPRA.TOTAL_SIN_IVA%TYPE;
    V_VALOR_IVA COMPRA.VALOR_IVA%TYPE;
    V_MES_ANIO VARCHAR2(20);
    V_ANIO_NUM NUMBER;
    V_MES_NUM NUMBER;
    
    -- Variables para comparativas
    V_MES_ANTERIOR NUMBER(16,2);
    V_VARIACION NUMBER(10,2);
    V_TENDENCIA VARCHAR2(15);
    
    -- Lista de meses
    TYPE tipo_meses IS TABLE OF VARCHAR2(20);
    V_MESES tipo_meses := tipo_meses(
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    );
    
    -- Lista de años
    TYPE tipo_anios IS TABLE OF VARCHAR2(20);
    V_ANIOS tipo_anios;
    
    -- Cursor para todas las compras
    CURSOR C_COMPRAS IS
        SELECT FECHA_COM, TOTAL_CON_IVA, TOTAL_SIN_IVA, VALOR_IVA
        FROM COMPRA;

BEGIN
    -- Inicializar contadores mensuales
    FOR I IN 1..V_MESES.COUNT LOOP
        V_VENTAS_MES(V_MESES(I)) := 0;
        V_VENTAS_SIN_IVA_MES(V_MESES(I)) := 0;
        V_IVA_MES(V_MESES(I)) := 0;
        V_CANTIDAD_VENTAS_MES(V_MESES(I)) := 0;
    END LOOP;
    
    -- Obtener años únicos de las compras
    BEGIN
        SELECT DISTINCT TO_CHAR(FECHA_COM, 'YYYY')
        BULK COLLECT INTO V_ANIOS
        FROM COMPRA
        ORDER BY 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_ANIOS := tipo_anios();
    END;
    
    -- Inicializar contadores anuales
    FOR I IN 1..V_ANIOS.COUNT LOOP
        V_VENTAS_ANIO(V_ANIOS(I)) := 0;
        V_VENTAS_SIN_IVA_ANIO(V_ANIOS(I)) := 0;
        V_IVA_ANIO(V_ANIOS(I)) := 0;
        V_CANTIDAD_VENTAS_ANIO(V_ANIOS(I)) := 0;
    END LOOP;

    -- Procesar todas las compras
    FOR REGISTRO IN C_COMPRAS LOOP
        V_FECHA_COM := REGISTRO.FECHA_COM;
        V_TOTAL_CON_IVA := REGISTRO.TOTAL_CON_IVA;
        V_TOTAL_SIN_IVA := REGISTRO.TOTAL_SIN_IVA;
        V_VALOR_IVA := REGISTRO.VALOR_IVA;
        
        V_ANIO_NUM := EXTRACT(YEAR FROM V_FECHA_COM);
        V_MES_NUM := EXTRACT(MONTH FROM V_FECHA_COM);
        
        -- Validar fecha
        IF V_ANIO_NUM > EXTRACT(YEAR FROM SYSDATE) + 1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'La fecha de compra ' || V_FECHA_COM || ' excede el máximo permitido.');
        END IF;

        -- Acumular por mes (si el mes es válido)
        IF V_MES_NUM BETWEEN 1 AND 12 THEN
            V_VENTAS_MES(V_MESES(V_MES_NUM)) := V_VENTAS_MES(V_MESES(V_MES_NUM)) + V_TOTAL_CON_IVA;
            V_VENTAS_SIN_IVA_MES(V_MESES(V_MES_NUM)) := V_VENTAS_SIN_IVA_MES(V_MESES(V_MES_NUM)) + V_TOTAL_SIN_IVA;
            V_IVA_MES(V_MESES(V_MES_NUM)) := V_IVA_MES(V_MESES(V_MES_NUM)) + V_VALOR_IVA;
            V_CANTIDAD_VENTAS_MES(V_MESES(V_MES_NUM)) := V_CANTIDAD_VENTAS_MES(V_MESES(V_MES_NUM)) + 1;
        END IF;
        
        -- Acumular por año
        IF V_ANIOS.COUNT > 0 THEN
            V_VENTAS_ANIO(TO_CHAR(V_ANIO_NUM)) := NVL(V_VENTAS_ANIO(TO_CHAR(V_ANIO_NUM)), 0) + V_TOTAL_CON_IVA;
            V_VENTAS_SIN_IVA_ANIO(TO_CHAR(V_ANIO_NUM)) := NVL(V_VENTAS_SIN_IVA_ANIO(TO_CHAR(V_ANIO_NUM)), 0) + V_TOTAL_SIN_IVA;
            V_IVA_ANIO(TO_CHAR(V_ANIO_NUM)) := NVL(V_IVA_ANIO(TO_CHAR(V_ANIO_NUM)), 0) + V_VALOR_IVA;
            V_CANTIDAD_VENTAS_ANIO(TO_CHAR(V_ANIO_NUM)) := NVL(V_CANTIDAD_VENTAS_ANIO(TO_CHAR(V_ANIO_NUM)), 0) + 1;
        END IF;
        
    END LOOP;

    -- Insertar datos mensuales con variación
    V_MES_ANTERIOR := NULL;
    
    FOR I IN 1..V_MESES.COUNT LOOP
        -- Calcular variación porcentual
        IF V_MES_ANTERIOR IS NOT NULL AND V_MES_ANTERIOR > 0 THEN
            V_VARIACION := ((V_VENTAS_MES(V_MESES(I)) - V_MES_ANTERIOR) / V_MES_ANTERIOR) * 100;
        ELSE
            V_VARIACION := NULL;
        END IF;
        
        -- Determinar tendencia
        IF V_VARIACION IS NOT NULL THEN
            IF V_VARIACION > 10 THEN
                V_TENDENCIA := 'FUERTE AUMENTO';
            ELSIF V_VARIACION > 5 THEN
                V_TENDENCIA := 'AUMENTO';
            ELSIF V_VARIACION < -10 THEN
                V_TENDENCIA := 'FUERTE DISMINUCIÓN';
            ELSIF V_VARIACION < -5 THEN
                V_TENDENCIA := 'DISMINUCIÓN';
            ELSE
                V_TENDENCIA := 'ESTABLE';
            END IF;
        ELSE
            V_TENDENCIA := 'SIN COMPARACIÓN';
        END IF;

        -- Insertar/actualizar registro mensual en KPI_2
        MERGE INTO KPI_2 k
        USING (
            SELECT V_MESES(I) AS PERIODO,
                   'MENSUAL' AS TIPO_PERIODO,
                   V_VENTAS_MES(V_MESES(I)) AS TOTAL_VENTAS,
                   V_VENTAS_SIN_IVA_MES(V_MESES(I)) AS TOTAL_SIN_IVA,
                   V_IVA_MES(V_MESES(I)) AS VALOR_IVA,
                   V_CANTIDAD_VENTAS_MES(V_MESES(I)) AS CANTIDAD_VENTAS,
                   V_VARIACION AS VARIACION_PORCENTAJE,
                   V_TENDENCIA AS TENDENCIA,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.PERIODO = src.PERIODO AND k.TIPO_PERIODO = src.TIPO_PERIODO)
        WHEN MATCHED THEN
            UPDATE SET 
                k.TOTAL_VENTAS = src.TOTAL_VENTAS,
                k.TOTAL_SIN_IVA = src.TOTAL_SIN_IVA,
                k.VALOR_IVA = src.VALOR_IVA,
                k.CANTIDAD_VENTAS = src.CANTIDAD_VENTAS,
                k.VARIACION_PORCENTAJE = src.VARIACION_PORCENTAJE,
                k.TENDENCIA = src.TENDENCIA,
                k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION
        WHEN NOT MATCHED THEN
            INSERT (KPI_2_ID, PERIODO, TIPO_PERIODO, TOTAL_VENTAS, TOTAL_SIN_IVA, 
                    VALOR_IVA, CANTIDAD_VENTAS, VARIACION_PORCENTAJE, TENDENCIA, FECHA_ACTUALIZACION)
            VALUES (KPI_2_SEQ.NEXTVAL, src.PERIODO, src.TIPO_PERIODO, src.TOTAL_VENTAS, 
                    src.TOTAL_SIN_IVA, src.VALOR_IVA, src.CANTIDAD_VENTAS, 
                    src.VARIACION_PORCENTAJE, src.TENDENCIA, src.FECHA_ACTUALIZACION);
        
        -- Actualizar mes anterior para siguiente iteración
        V_MES_ANTERIOR := V_VENTAS_MES(V_MESES(I));
    END LOOP;

    -- Insertar datos anuales
    FOR I IN 1..V_ANIOS.COUNT LOOP
        MERGE INTO KPI_2 k
        USING (
            SELECT V_ANIOS(I) AS PERIODO,
                   'ANUAL' AS TIPO_PERIODO,
                   V_VENTAS_ANIO(V_ANIOS(I)) AS TOTAL_VENTAS,
                   V_VENTAS_SIN_IVA_ANIO(V_ANIOS(I)) AS TOTAL_SIN_IVA,
                   V_IVA_ANIO(V_ANIOS(I)) AS VALOR_IVA,
                   V_CANTIDAD_VENTAS_ANIO(V_ANIOS(I)) AS CANTIDAD_VENTAS,
                   NULL AS VARIACION_PORCENTAJE, -- No calculamos variación anual aquí
                   'ANUAL' AS TENDENCIA,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.PERIODO = src.PERIODO AND k.TIPO_PERIODO = src.TIPO_PERIODO)
        WHEN MATCHED THEN
            UPDATE SET 
                k.TOTAL_VENTAS = src.TOTAL_VENTAS,
                k.TOTAL_SIN_IVA = src.TOTAL_SIN_IVA,
                k.VALOR_IVA = src.VALOR_IVA,
                k.CANTIDAD_VENTAS = src.CANTIDAD_VENTAS,
                k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION
        WHEN NOT MATCHED THEN
            INSERT (KPI_2_ID, PERIODO, TIPO_PERIODO, TOTAL_VENTAS, TOTAL_SIN_IVA, 
                    VALOR_IVA, CANTIDAD_VENTAS, VARIACION_PORCENTAJE, TENDENCIA, FECHA_ACTUALIZACION)
            VALUES (KPI_2_SEQ.NEXTVAL, src.PERIODO, src.TIPO_PERIODO, src.TOTAL_VENTAS, 
                    src.TOTAL_SIN_IVA, src.VALOR_IVA, src.CANTIDAD_VENTAS, 
                    src.VARIACION_PORCENTAJE, src.TENDENCIA, src.FECHA_ACTUALIZACION);
    END LOOP;

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('KPI_2 - Análisis de ventas completado exitosamente.');
    
EXCEPTION
    WHEN OTHERS THEN 
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en KPI_2: ' || SQLERRM);
        RAISE;
END PROC_KPI2_VENTAS;
/

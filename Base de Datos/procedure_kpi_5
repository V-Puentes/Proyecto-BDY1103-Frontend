CREATE OR REPLACE PROCEDURE PROC_KPI5_TASA_ENTREGAS IS

    -- Tipos para almacenar datos de entregas
    TYPE tipo_contador_entregas IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
    TYPE tipo_tasas IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
    
    -- Variables para entregas mensuales
    V_TOTAL_ENTREGAS_MES tipo_contador_entregas;
    V_ENTREGAS_EXITOSAS_MES tipo_contador_entregas;
    V_ENTREGAS_FALLIDAS_MES tipo_contador_entregas;
    V_TASA_EXITOSAS_MES tipo_tasas;
    
    -- Variables para entregas anuales
    V_TOTAL_ENTREGAS_ANIO tipo_contador_entregas;
    V_ENTREGAS_EXITOSAS_ANIO tipo_contador_entregas;
    V_ENTREGAS_FALLIDAS_ANIO tipo_contador_entregas;
    V_TASA_EXITOSAS_ANIO tipo_tasas;
    
    -- Variables de trabajo
    V_FECHA_ENTREGA ENTREGA.FECHA_ENT_FIN%TYPE;
    V_ESTADO_ENTREGA ENTREGA.ESTADO_ENT%TYPE;
    V_MES_ANIO VARCHAR2(20);
    V_ANIO_NUM VARCHAR2(4);
    V_MES_NUM NUMBER;
    
    -- Variables para cálculos
    V_TASA_EXITOSAS NUMBER(10,4);
    V_TASA_ANTERIOR NUMBER(10,4);
    V_VARIACION_TASA NUMBER(10,4);
    V_TENDENCIA VARCHAR2(15);
    V_MES_ALERTA VARCHAR2(3);
    
    -- Listas de períodos
    TYPE tipo_meses IS TABLE OF VARCHAR2(20);
    V_MESES tipo_meses := tipo_meses(
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    );
    
    TYPE tipo_anios IS TABLE OF VARCHAR2(4);
    V_ANIOS tipo_anios;
    
    -- Cursor para todas las entregas
    CURSOR C_ENTREGAS IS
        SELECT FECHA_ENT_FIN, ESTADO_ENT
        FROM ENTREGA
        WHERE FECHA_ENT_FIN IS NOT NULL;
    
    -- Función para determinar si una entrega es exitosa
    FUNCTION ES_ENTREGA_EXITOSA(p_estado IN VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN UPPER(p_estado) IN ('ENTREGADO', 'COMPLETADO', 'EXITOSO', 'FINALIZADO');
    END ES_ENTREGA_EXITOSA;
    
    -- Función para obtener tasa anterior desde KPI_5
    FUNCTION OBTENER_TASA_ANTERIOR(p_periodo IN VARCHAR2) RETURN NUMBER IS
        v_tasa NUMBER;
    BEGIN
        SELECT TASA_EXITOSAS
        INTO v_tasa
        FROM KPI_5
        WHERE PERIODO = p_periodo
          AND TIPO_PERIODO = 'MENSUAL'
          AND FECHA_ACTUALIZACION = (SELECT MAX(FECHA_ACTUALIZACION) 
                                   FROM KPI_5 
                                   WHERE PERIODO = p_periodo 
                                   AND TIPO_PERIODO = 'MENSUAL')
        AND ROWNUM = 1;
        
        RETURN v_tasa;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
    END OBTENER_TASA_ANTERIOR;

BEGIN
    -- Inicializar contadores mensuales
    FOR I IN 1..V_MESES.COUNT LOOP
        V_TOTAL_ENTREGAS_MES(V_MESES(I)) := 0;
        V_ENTREGAS_EXITOSAS_MES(V_MESES(I)) := 0;
        V_ENTREGAS_FALLIDAS_MES(V_MESES(I)) := 0;
        V_TASA_EXITOSAS_MES(V_MESES(I)) := 0;
    END LOOP;
    
    -- Obtener años únicos de las entregas
    BEGIN
        SELECT DISTINCT TO_CHAR(FECHA_ENT_FIN, 'YYYY')
        BULK COLLECT INTO V_ANIOS
        FROM ENTREGA
        WHERE FECHA_ENT_FIN IS NOT NULL
        ORDER BY 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_ANIOS := tipo_anios();
    END;
    
    -- Inicializar contadores anuales
    FOR I IN 1..V_ANIOS.COUNT LOOP
        V_TOTAL_ENTREGAS_ANIO(V_ANIOS(I)) := 0;
        V_ENTREGAS_EXITOSAS_ANIO(V_ANIOS(I)) := 0;
        V_ENTREGAS_FALLIDAS_ANIO(V_ANIOS(I)) := 0;
        V_TASA_EXITOSAS_ANIO(V_ANIOS(I)) := 0;
    END LOOP;

    -- Procesar todas las entregas
    FOR REGISTRO IN C_ENTREGAS LOOP
        V_FECHA_ENTREGA := REGISTRO.FECHA_ENT_FIN;
        V_ESTADO_ENTREGA := REGISTRO.ESTADO_ENT;
        
        V_ANIO_NUM := TO_CHAR(EXTRACT(YEAR FROM V_FECHA_ENTREGA));
        V_MES_NUM := EXTRACT(MONTH FROM V_FECHA_ENTREGA);
        
        -- Validar fecha
        IF V_ANIO_NUM IS NOT NULL AND V_MES_NUM BETWEEN 1 AND 12 THEN
            -- Acumular por mes
            V_TOTAL_ENTREGAS_MES(V_MESES(V_MES_NUM)) := V_TOTAL_ENTREGAS_MES(V_MESES(V_MES_NUM)) + 1;
            
            IF ES_ENTREGA_EXITOSA(V_ESTADO_ENTREGA) THEN
                V_ENTREGAS_EXITOSAS_MES(V_MESES(V_MES_NUM)) := V_ENTREGAS_EXITOSAS_MES(V_MESES(V_MES_NUM)) + 1;
            ELSE
                V_ENTREGAS_FALLIDAS_MES(V_MESES(V_MES_NUM)) := V_ENTREGAS_FALLIDAS_MES(V_MESES(V_MES_NUM)) + 1;
            END IF;
            
            -- Acumular por año
            IF V_ANIOS.COUNT > 0 THEN
                V_TOTAL_ENTREGAS_ANIO(V_ANIO_NUM) := NVL(V_TOTAL_ENTREGAS_ANIO(V_ANIO_NUM), 0) + 1;
                
                IF ES_ENTREGA_EXITOSA(V_ESTADO_ENTREGA) THEN
                    V_ENTREGAS_EXITOSAS_ANIO(V_ANIO_NUM) := NVL(V_ENTREGAS_EXITOSAS_ANIO(V_ANIO_NUM), 0) + 1;
                ELSE
                    V_ENTREGAS_FALLIDAS_ANIO(V_ANIO_NUM) := NVL(V_ENTREGAS_FALLIDAS_ANIO(V_ANIO_NUM), 0) + 1;
                END IF;
            END IF;
        END IF;
    END LOOP;

    -- Procesar datos mensuales
    V_TASA_ANTERIOR := NULL;
    
    FOR I IN 1..V_MESES.COUNT LOOP
        -- Calcular tasa de éxito mensual
        IF V_TOTAL_ENTREGAS_MES(V_MESES(I)) > 0 THEN
            V_TASA_EXITOSAS := (V_ENTREGAS_EXITOSAS_MES(V_MESES(I)) / V_TOTAL_ENTREGAS_MES(V_MESES(I))) * 100;
        ELSE
            V_TASA_EXITOSAS := 0;
        END IF;
        
        -- Obtener tasa anterior (para comparación)
        BEGIN
            V_TASA_ANTERIOR := OBTENER_TASA_ANTERIOR(V_MESES(I));
        EXCEPTION
            WHEN OTHERS THEN
                V_TASA_ANTERIOR := NULL;
        END;
        
        -- Calcular variación
        IF V_TASA_ANTERIOR IS NOT NULL AND V_TASA_ANTERIOR > 0 THEN
            V_VARIACION_TASA := V_TASA_EXITOSAS - V_TASA_ANTERIOR;
        ELSE
            V_VARIACION_TASA := NULL;
        END IF;
        
        -- Determinar tendencia
        IF V_VARIACION_TASA IS NOT NULL THEN
            IF V_VARIACION_TASA > 5 THEN
                V_TENDENCIA := 'MEJORA SIGNIF.';
            ELSIF V_VARIACION_TASA > 1 THEN
                V_TENDENCIA := 'MEJORA';
            ELSIF V_VARIACION_TASA < -10 THEN
                V_TENDENCIA := 'FUERTE DISMIN.';
            ELSIF V_VARIACION_TASA < -3 THEN
                V_TENDENCIA := 'DISMINUYE';
            ELSE
                V_TENDENCIA := 'ESTABLE';
            END IF;
        ELSE
            V_TENDENCIA := 'SIN COMPARACIÓN';
        END IF;
        
        -- Determinar si es mes de alerta (tasa muy baja)
        IF V_TASA_EXITOSAS < 70 THEN
            V_MES_ALERTA := 'SI';
        ELSIF V_TASA_EXITOSAS < 85 THEN
            V_MES_ALERTA := 'MEDIA';
        ELSE
            V_MES_ALERTA := 'NO';
        END IF;
        
        -- Insertar/actualizar KPI_5 para datos mensuales
        MERGE INTO KPI_5 k
        USING (
            SELECT V_MESES(I) AS PERIODO,
                   'MENSUAL' AS TIPO_PERIODO,
                   V_TOTAL_ENTREGAS_MES(V_MESES(I)) AS TOTAL_ENTREGAS,
                   V_ENTREGAS_EXITOSAS_MES(V_MESES(I)) AS ENTREGAS_EXITOSAS,
                   V_ENTREGAS_FALLIDAS_MES(V_MESES(I)) AS ENTREGAS_FALLIDAS,
                   V_TASA_EXITOSAS AS TASA_EXITOSAS,
                   V_TASA_ANTERIOR AS TASA_ANTERIOR,
                   V_VARIACION_TASA AS VARIACION_TASA,
                   V_TENDENCIA AS TENDENCIA,
                   V_MES_ALERTA AS MES_ALERTA,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.PERIODO = src.PERIODO AND k.TIPO_PERIODO = src.TIPO_PERIODO AND k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION)
        WHEN MATCHED THEN
            UPDATE SET 
                k.TOTAL_ENTREGAS = src.TOTAL_ENTREGAS,
                k.ENTREGAS_EXITOSAS = src.ENTREGAS_EXITOSAS,
                k.ENTREGAS_FALLIDAS = src.ENTREGAS_FALLIDAS,
                k.TASA_EXITOSAS = src.TASA_EXITOSAS,
                k.TASA_ANTERIOR = src.TASA_ANTERIOR,
                k.VARIACION_TASA = src.VARIACION_TASA,
                k.TENDENCIA = src.TENDENCIA,
                k.MES_ALERTA = src.MES_ALERTA
        WHEN NOT MATCHED THEN
            INSERT (KPI_5_ID, PERIODO, TIPO_PERIODO, TOTAL_ENTREGAS, ENTREGAS_EXITOSAS, 
                    ENTREGAS_FALLIDAS, TASA_EXITOSAS, TASA_ANTERIOR, VARIACION_TASA, 
                    TENDENCIA, MES_ALERTA, FECHA_ACTUALIZACION)
            VALUES (KPI_5_SEQ.NEXTVAL, src.PERIODO, src.TIPO_PERIODO, src.TOTAL_ENTREGAS, 
                    src.ENTREGAS_EXITOSAS, src.ENTREGAS_FALLIDAS, src.TASA_EXITOSAS, 
                    src.TASA_ANTERIOR, src.VARIACION_TASA, src.TENDENCIA, src.MES_ALERTA, 
                    src.FECHA_ACTUALIZACION);
    END LOOP;

    -- Procesar datos anuales
    FOR I IN 1..V_ANIOS.COUNT LOOP
        -- Calcular tasa de éxito anual
        IF V_TOTAL_ENTREGAS_ANIO(V_ANIOS(I)) > 0 THEN
            V_TASA_EXITOSAS := (V_ENTREGAS_EXITOSAS_ANIO(V_ANIOS(I)) / V_TOTAL_ENTREGAS_ANIO(V_ANIOS(I))) * 100;
        ELSE
            V_TASA_EXITOSAS := 0;
        END IF;
        
        -- Insertar/actualizar KPI_5 para datos anuales
        MERGE INTO KPI_5 k
        USING (
            SELECT V_ANIOS(I) AS PERIODO,
                   'ANUAL' AS TIPO_PERIODO,
                   V_TOTAL_ENTREGAS_ANIO(V_ANIOS(I)) AS TOTAL_ENTREGAS,
                   V_ENTREGAS_EXITOSAS_ANIO(V_ANIOS(I)) AS ENTREGAS_EXITOSAS,
                   V_ENTREGAS_FALLIDAS_ANIO(V_ANIOS(I)) AS ENTREGAS_FALLIDAS,
                   V_TASA_EXITOSAS AS TASA_EXITOSAS,
                   NULL AS TASA_ANTERIOR,
                   NULL AS VARIACION_TASA,
                   'ANUAL' AS TENDENCIA,
                   CASE WHEN V_TASA_EXITOSAS < 80 THEN 'SI' ELSE 'NO' END AS MES_ALERTA,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.PERIODO = src.PERIODO AND k.TIPO_PERIODO = src.TIPO_PERIODO AND k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION)
        WHEN MATCHED THEN
            UPDATE SET 
                k.TOTAL_ENTREGAS = src.TOTAL_ENTREGAS,
                k.ENTREGAS_EXITOSAS = src.ENTREGAS_EXITOSAS,
                k.ENTREGAS_FALLIDAS = src.ENTREGAS_FALLIDAS,
                k.TASA_EXITOSAS = src.TASA_EXITOSAS,
                k.MES_ALERTA = src.MES_ALERTA
        WHEN NOT MATCHED THEN
            INSERT (KPI_5_ID, PERIODO, TIPO_PERIODO, TOTAL_ENTREGAS, ENTREGAS_EXITOSAS, 
                    ENTREGAS_FALLIDAS, TASA_EXITOSAS, TASA_ANTERIOR, VARIACION_TASA, 
                    TENDENCIA, MES_ALERTA, FECHA_ACTUALIZACION)
            VALUES (KPI_5_SEQ.NEXTVAL, src.PERIODO, src.TIPO_PERIODO, src.TOTAL_ENTREGAS, 
                    src.ENTREGAS_EXITOSAS, src.ENTREGAS_FALLIDAS, src.TASA_EXITOSAS, 
                    src.TASA_ANTERIOR, src.VARIACION_TASA, src.TENDENCIA, src.MES_ALERTA, 
                    src.FECHA_ACTUALIZACION);
    END LOOP;

    -- Insertar resumen general del año actual
    DECLARE
        V_ANIO_ACTUAL VARCHAR2(4) := TO_CHAR(SYSDATE, 'YYYY');
        V_TOTAL_ENTREGAS_ACTUAL NUMBER := 0;
        V_ENTREGAS_EXITOSAS_ACTUAL NUMBER := 0;
        V_PROMEDIO_TASA_MENSUAL NUMBER := 0;
        V_MESES_CON_DATOS NUMBER := 0;
    BEGIN
        -- Calcular promedios del año actual
        FOR I IN 1..V_MESES.COUNT LOOP
            IF V_TOTAL_ENTREGAS_MES(V_MESES(I)) > 0 THEN
                V_PROMEDIO_TASA_MENSUAL := V_PROMEDIO_TASA_MENSUAL + V_TASA_EXITOSAS_MES(V_MESES(I));
                V_MESES_CON_DATOS := V_MESES_CON_DATOS + 1;
            END IF;
        END LOOP;
        
        IF V_MESES_CON_DATOS > 0 THEN
            V_PROMEDIO_TASA_MENSUAL := V_PROMEDIO_TASA_MENSUAL / V_MESES_CON_DATOS;
        END IF;
        
        -- Insertar resumen
        MERGE INTO KPI_5 k
        USING (
            SELECT 'RESUMEN ' || V_ANIO_ACTUAL AS PERIODO,
                   'RESUMEN' AS TIPO_PERIODO,
                   V_TOTAL_ENTREGAS_ANIO(V_ANIO_ACTUAL) AS TOTAL_ENTREGAS,
                   V_ENTREGAS_EXITOSAS_ANIO(V_ANIO_ACTUAL) AS ENTREGAS_EXITOSAS,
                   V_ENTREGAS_FALLIDAS_ANIO(V_ANIO_ACTUAL) AS ENTREGAS_FALLIDAS,
                   V_PROMEDIO_TASA_MENSUAL AS TASA_EXITOSAS,
                   NULL AS TASA_ANTERIOR,
                   NULL AS VARIACION_TASA,
                   'RESUMEN' AS TENDENCIA,
                   CASE WHEN V_PROMEDIO_TASA_MENSUAL < 85 THEN 'SI' ELSE 'NO' END AS MES_ALERTA,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.PERIODO = src.PERIODO AND k.TIPO_PERIODO = src.TIPO_PERIODO AND k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION)
        WHEN MATCHED THEN
            UPDATE SET 
                k.TOTAL_ENTREGAS = src.TOTAL_ENTREGAS,
                k.ENTREGAS_EXITOSAS = src.ENTREGAS_EXITOSAS,
                k.ENTREGAS_FALLIDAS = src.ENTREGAS_FALLIDAS,
                k.TASA_EXITOSAS = src.TASA_EXITOSAS,
                k.MES_ALERTA = src.MES_ALERTA
        WHEN NOT MATCHED THEN
            INSERT (KPI_5_ID, PERIODO, TIPO_PERIODO, TOTAL_ENTREGAS, ENTREGAS_EXITOSAS, 
                    ENTREGAS_FALLIDAS, TASA_EXITOSAS, TASA_ANTERIOR, VARIACION_TASA, 
                    TENDENCIA, MES_ALERTA, FECHA_ACTUALIZACION)
            VALUES (KPI_5_SEQ.NEXTVAL, src.PERIODO, src.TIPO_PERIODO, src.TOTAL_ENTREGAS, 
                    src.ENTREGAS_EXITOSAS, src.ENTREGAS_FALLIDAS, src.TASA_EXITOSAS, 
                    src.TASA_ANTERIOR, src.VARIACION_TASA, src.TENDENCIA, src.MES_ALERTA, 
                    src.FECHA_ACTUALIZACION);
    END;

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('KPI_5 - Tasa de entregas exitosas calculada exitosamente.');
    DBMS_OUTPUT.PUT_LINE('Años procesados: ' || V_ANIOS.COUNT);
    
EXCEPTION
    WHEN OTHERS THEN 
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en KPI_5: ' || SQLERRM);
        RAISE;
END PROC_KPI5_TASA_ENTREGAS;
/

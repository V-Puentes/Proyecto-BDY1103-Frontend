CREATE OR REPLACE PROCEDURE PROC_KPI7_TASA_CONVERSION_CARRITOS IS

    -- Tipos para almacenar datos de carritos
    TYPE tipo_contador_carritos IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
    TYPE tipo_tasas IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
    TYPE tipo_ventas_perdidas IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
    
    -- Variables para carritos mensuales
    V_TOTAL_CARRITOS_MES tipo_contador_carritos;
    V_CARRITOS_CONVERTIDOS_MES tipo_contador_carritos;
    V_CARRITOS_ABANDONADOS_MES tipo_contador_carritos;
    V_TASA_CONVERSION_MES tipo_tasas;
    V_VENTAS_PERDIDAS_MES tipo_ventas_perdidas;
    
    -- Variables para carritos anuales
    V_TOTAL_CARRITOS_ANIO tipo_contador_carritos;
    V_CARRITOS_CONVERTIDOS_ANIO tipo_contador_carritos;
    V_CARRITOS_ABANDONADOS_ANIO tipo_contador_carritos;
    V_TASA_CONVERSION_ANIO tipo_tasas;
    V_VENTAS_PERDIDAS_ANIO tipo_ventas_perdidas;
    
    -- Variables de trabajo
    V_FECHA_CARRITO CARRITO.FEC_CRE_CA%TYPE;
    V_ID_CARRITO CARRITO.ID_CA%TYPE;
    V_MES_ANIO VARCHAR2(20);
    V_ANIO_NUM VARCHAR2(4);
    V_MES_NUM NUMBER;
    V_TIENE_COMPRA NUMBER;
    
    -- Variables para cálculos
    V_TASA_CONVERSION NUMBER(10,4);
    V_TASA_ABANDONO NUMBER(10,4);
    V_TASA_CONVERSION_ANTERIOR NUMBER(10,4);
    V_VARIACION_TASA NUMBER(10,4);
    V_TENDENCIA VARCHAR2(15);
    V_ALERTA_ABANDONO VARCHAR2(3);
    V_VENTAS_PERDIDAS_ESTIMADAS NUMBER(16,2);
    
    -- Listas de períodos
    TYPE tipo_meses IS TABLE OF VARCHAR2(20);
    V_MESES tipo_meses := tipo_meses(
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    );
    
    TYPE tipo_anios IS TABLE OF VARCHAR2(4);
    V_ANIOS tipo_anios;
    
    -- Cursor para todos los carritos
    CURSOR C_CARRITOS IS
        SELECT c.ID_CA, c.FEC_CRE_CA, 
               CASE WHEN comp.COD_COM IS NOT NULL THEN 1 ELSE 0 END AS TIENE_COMPRA
        FROM CARRITO c
        LEFT JOIN COMPRA comp ON c.ID_CA = comp.CARRITO_ID_CA;
    
    -- Función para calcular valor promedio de carrito abandonado
    FUNCTION CALCULAR_VALOR_PROMEDIO_CARRITO(p_mes IN VARCHAR2) RETURN NUMBER IS
        v_valor_promedio NUMBER(16,2);
    BEGIN
        -- Calcular valor promedio de los carritos convertidos en compras
        SELECT AVG(dc.CANT_PRO * p.PRE_PRO)
        INTO v_valor_promedio
        FROM DETALLE_CARRITO dc
        JOIN PRODUCTO p ON dc.PRODUCTO_ID_PRO = p.ID_PRO
        JOIN CARRITO c ON dc.CARRITO_ID_CA = c.ID_CA
        JOIN COMPRA comp ON c.ID_CA = comp.CARRITO_ID_CA
        WHERE TO_CHAR(c.FEC_CRE_CA, 'Month') = TRIM(p_mes)
          AND EXTRACT(YEAR FROM c.FEC_CRE_CA) = EXTRACT(YEAR FROM SYSDATE);
        
        RETURN NVL(v_valor_promedio, 0);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 0;
        WHEN OTHERS THEN
            RETURN 0;
    END CALCULAR_VALOR_PROMEDIO_CARRITO;
    
    -- Función para obtener tasa anterior desde KPI_7
    FUNCTION OBTENER_TASA_ANTERIOR(p_periodo IN VARCHAR2) RETURN NUMBER IS
        v_tasa NUMBER;
    BEGIN
        SELECT TASA_CONVERSION
        INTO v_tasa
        FROM KPI_7
        WHERE PERIODO = p_periodo
          AND TIPO_PERIODO = 'MENSUAL'
          AND FECHA_ACTUALIZACION = (SELECT MAX(FECHA_ACTUALIZACION) 
                                   FROM KPI_7 
                                   WHERE PERIODO = p_periodo 
                                   AND TIPO_PERIODO = 'MENSUAL')
        AND ROWNUM = 1;
        
        RETURN v_tasa;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
    END OBTENER_TASA_ANTERIOR;

BEGIN
    -- Inicializar contadores mensuales
    FOR I IN 1..V_MESES.COUNT LOOP
        V_TOTAL_CARRITOS_MES(V_MESES(I)) := 0;
        V_CARRITOS_CONVERTIDOS_MES(V_MESES(I)) := 0;
        V_CARRITOS_ABANDONADOS_MES(V_MESES(I)) := 0;
        V_TASA_CONVERSION_MES(V_MESES(I)) := 0;
        V_VENTAS_PERDIDAS_MES(V_MESES(I)) := 0;
    END LOOP;
    
    -- Obtener años únicos de los carritos
    BEGIN
        SELECT DISTINCT TO_CHAR(FEC_CRE_CA, 'YYYY')
        BULK COLLECT INTO V_ANIOS
        FROM CARRITO
        ORDER BY 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_ANIOS := tipo_anios();
    END;
    
    -- Inicializar contadores anuales
    FOR I IN 1..V_ANIOS.COUNT LOOP
        V_TOTAL_CARRITOS_ANIO(V_ANIOS(I)) := 0;
        V_CARRITOS_CONVERTIDOS_ANIO(V_ANIOS(I)) := 0;
        V_CARRITOS_ABANDONADOS_ANIO(V_ANIOS(I)) := 0;
        V_TASA_CONVERSION_ANIO(V_ANIOS(I)) := 0;
        V_VENTAS_PERDIDAS_ANIO(V_ANIOS(I)) := 0;
    END LOOP;

    -- Procesar todos los carritos
    FOR REGISTRO IN C_CARRITOS LOOP
        V_ID_CARRITO := REGISTRO.ID_CA;
        V_FECHA_CARRITO := REGISTRO.FEC_CRE_CA;
        V_TIENE_COMPRA := REGISTRO.TIENE_COMPRA;
        
        V_ANIO_NUM := TO_CHAR(EXTRACT(YEAR FROM V_FECHA_CARRITO));
        V_MES_NUM := EXTRACT(MONTH FROM V_FECHA_CARRITO);
        
        -- Validar fecha y mes
        IF V_ANIO_NUM IS NOT NULL AND V_MES_NUM BETWEEN 1 AND 12 THEN
            -- Acumular por mes
            V_TOTAL_CARRITOS_MES(V_MESES(V_MES_NUM)) := V_TOTAL_CARRITOS_MES(V_MESES(V_MES_NUM)) + 1;
            
            IF V_TIENE_COMPRA = 1 THEN
                V_CARRITOS_CONVERTIDOS_MES(V_MESES(V_MES_NUM)) := V_CARRITOS_CONVERTIDOS_MES(V_MESES(V_MES_NUM)) + 1;
            ELSE
                V_CARRITOS_ABANDONADOS_MES(V_MESES(V_MES_NUM)) := V_CARRITOS_ABANDONADOS_MES(V_MESES(V_MES_NUM)) + 1;
            END IF;
            
            -- Acumular por año
            IF V_ANIOS.COUNT > 0 THEN
                V_TOTAL_CARRITOS_ANIO(V_ANIO_NUM) := NVL(V_TOTAL_CARRITOS_ANIO(V_ANIO_NUM), 0) + 1;
                
                IF V_TIENE_COMPRA = 1 THEN
                    V_CARRITOS_CONVERTIDOS_ANIO(V_ANIO_NUM) := NVL(V_CARRITOS_CONVERTIDOS_ANIO(V_ANIO_NUM), 0) + 1;
                ELSE
                    V_CARRITOS_ABANDONADOS_ANIO(V_ANIO_NUM) := NVL(V_CARRITOS_ABANDONADOS_ANIO(V_ANIO_NUM), 0) + 1;
                END IF;
            END IF;
        END IF;
    END LOOP;

    -- Procesar datos mensuales
    V_TASA_CONVERSION_ANTERIOR := NULL;
    
    FOR I IN 1..V_MESES.COUNT LOOP
        -- Calcular tasas mensuales
        IF V_TOTAL_CARRITOS_MES(V_MESES(I)) > 0 THEN
            V_TASA_CONVERSION := (V_CARRITOS_CONVERTIDOS_MES(V_MESES(I)) / V_TOTAL_CARRITOS_MES(V_MESES(I))) * 100;
            V_TASA_ABANDONO := (V_CARRITOS_ABANDONADOS_MES(V_MESES(I)) / V_TOTAL_CARRITOS_MES(V_MESES(I))) * 100;
        ELSE
            V_TASA_CONVERSION := 0;
            V_TASA_ABANDONO := 0;
        END IF;
        
        -- Calcular ventas perdidas estimadas
        V_VENTAS_PERDIDAS_ESTIMADAS := V_CARRITOS_ABANDONADOS_MES(V_MESES(I)) * CALCULAR_VALOR_PROMEDIO_CARRITO(V_MESES(I));
        
        -- Obtener tasa anterior (para comparación)
        BEGIN
            V_TASA_CONVERSION_ANTERIOR := OBTENER_TASA_ANTERIOR(V_MESES(I));
        EXCEPTION
            WHEN OTHERS THEN
                V_TASA_CONVERSION_ANTERIOR := NULL;
        END;
        
        -- Calcular variación
        IF V_TASA_CONVERSION_ANTERIOR IS NOT NULL AND V_TASA_CONVERSION_ANTERIOR > 0 THEN
            V_VARIACION_TASA := V_TASA_CONVERSION - V_TASA_CONVERSION_ANTERIOR;
        ELSE
            V_VARIACION_TASA := NULL;
        END IF;
        
        -- Determinar tendencia
        IF V_VARIACION_TASA IS NOT NULL THEN
            IF V_VARIACION_TASA > 5 THEN
                V_TENDENCIA := 'MEJORA SIGNIF.';
            ELSIF V_VARIACION_TASA > 2 THEN
                V_TENDENCIA := 'MEJORA';
            ELSIF V_VARIACION_TASA < -5 THEN
                V_TENDENCIA := 'DISMINUYE FUERTE';
            ELSIF V_VARIACION_TASA < -2 THEN
                V_TENDENCIA := 'DISMINUYE';
            ELSE
                V_TENDENCIA := 'ESTABLE';
            END IF;
        ELSE
            V_TENDENCIA := 'SIN COMPARACIÓN';
        END IF;
        
        -- Determinar alerta de abandono (tasa > 30%)
        IF V_TASA_ABANDONO > 30 THEN
            V_ALERTA_ABANDONO := 'SI';
        ELSE
            V_ALERTA_ABANDONO := 'NO';
        END IF;
        
        -- Insertar/actualizar KPI_7 para datos mensuales
        MERGE INTO KPI_7 k
        USING (
            SELECT V_MESES(I) AS PERIODO,
                   'MENSUAL' AS TIPO_PERIODO,
                   V_TOTAL_CARRITOS_MES(V_MESES(I)) AS TOTAL_CARRITOS,
                   V_CARRITOS_CONVERTIDOS_MES(V_MESES(I)) AS CARRITOS_CONVERTIDOS,
                   V_CARRITOS_ABANDONADOS_MES(V_MESES(I)) AS CARRITOS_ABANDONADOS,
                   V_TASA_CONVERSION AS TASA_CONVERSION,
                   V_TASA_ABANDONO AS TASA_ABANDONO,
                   V_TASA_CONVERSION_ANTERIOR AS TASA_CONVERSION_ANTERIOR,
                   V_VARIACION_TASA AS VARIACION_TASA,
                   V_TENDENCIA AS TENDENCIA,
                   V_ALERTA_ABANDONO AS ALERTA_ABANDONO,
                   V_VENTAS_PERDIDAS_ESTIMADAS AS VENTAS_PERDIDAS_ESTIMADAS,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.PERIODO = src.PERIODO AND k.TIPO_PERIODO = src.TIPO_PERIODO AND k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION)
        WHEN MATCHED THEN
            UPDATE SET 
                k.TOTAL_CARRITOS = src.TOTAL_CARRITOS,
                k.CARRITOS_CONVERTIDOS = src.CARRITOS_CONVERTIDOS,
                k.CARRITOS_ABANDONADOS = src.CARRITOS_ABANDONADOS,
                k.TASA_CONVERSION = src.TASA_CONVERSION,
                k.TASA_ABANDONO = src.TASA_ABANDONO,
                k.TASA_CONVERSION_ANTERIOR = src.TASA_CONVERSION_ANTERIOR,
                k.VARIACION_TASA = src.VARIACION_TASA,
                k.TENDENCIA = src.TENDENCIA,
                k.ALERTA_ABANDONO = src.ALERTA_ABANDONO,
                k.VENTAS_PERDIDAS_ESTIMADAS = src.VENTAS_PERDIDAS_ESTIMADAS
        WHEN NOT MATCHED THEN
            INSERT (KPI_7_ID, PERIODO, TIPO_PERIODO, TOTAL_CARRITOS, CARRITOS_CONVERTIDOS, 
                    CARRITOS_ABANDONADOS, TASA_CONVERSION, TASA_ABANDONO, TASA_CONVERSION_ANTERIOR,
                    VARIACION_TASA, TENDENCIA, ALERTA_ABANDONO, VENTAS_PERDIDAS_ESTIMADAS, FECHA_ACTUALIZACION)
            VALUES (KPI_7_SEQ.NEXTVAL, src.PERIODO, src.TIPO_PERIODO, src.TOTAL_CARRITOS, 
                    src.CARRITOS_CONVERTIDOS, src.CARRITOS_ABANDONADOS, src.TASA_CONVERSION, 
                    src.TASA_ABANDONO, src.TASA_CONVERSION_ANTERIOR, src.VARIACION_TASA, 
                    src.TENDENCIA, src.ALERTA_ABANDONO, src.VENTAS_PERDIDAS_ESTIMADAS, 
                    src.FECHA_ACTUALIZACION);
    END LOOP;

    -- Procesar datos anuales
    FOR I IN 1..V_ANIOS.COUNT LOOP
        -- Calcular tasas anuales
        IF V_TOTAL_CARRITOS_ANIO(V_ANIOS(I)) > 0 THEN
            V_TASA_CONVERSION := (V_CARRITOS_CONVERTIDOS_ANIO(V_ANIOS(I)) / V_TOTAL_CARRITOS_ANIO(V_ANIOS(I))) * 100;
            V_TASA_ABANDONO := (V_CARRITOS_ABANDONADOS_ANIO(V_ANIOS(I)) / V_TOTAL_CARRITOS_ANIO(V_ANIOS(I))) * 100;
        ELSE
            V_TASA_CONVERSION := 0;
            V_TASA_ABANDONO := 0;
        END IF;
        
        -- Calcular ventas perdidas estimadas anuales
        V_VENTAS_PERDIDAS_ESTIMADAS := V_CARRITOS_ABANDONADOS_ANIO(V_ANIOS(I)) * 25000; -- Valor promedio estimado
        
        -- Determinar alerta de abandono anual
        IF V_TASA_ABANDONO > 30 THEN
            V_ALERTA_ABANDONO := 'SI';
        ELSE
            V_ALERTA_ABANDONO := 'NO';
        END IF;
        
        -- Insertar/actualizar KPI_7 para datos anuales
        MERGE INTO KPI_7 k
        USING (
            SELECT V_ANIOS(I) AS PERIODO,
                   'ANUAL' AS TIPO_PERIODO,
                   V_TOTAL_CARRITOS_ANIO(V_ANIOS(I)) AS TOTAL_CARRITOS,
                   V_CARRITOS_CONVERTIDOS_ANIO(V_ANIOS(I)) AS CARRITOS_CONVERTIDOS,
                   V_CARRITOS_ABANDONADOS_ANIO(V_ANIOS(I)) AS CARRITOS_ABANDONADOS,
                   V_TASA_CONVERSION AS TASA_CONVERSION,
                   V_TASA_ABANDONO AS TASA_ABANDONO,
                   NULL AS TASA_CONVERSION_ANTERIOR,
                   NULL AS VARIACION_TASA,
                   'ANUAL' AS TENDENCIA,
                   V_ALERTA_ABANDONO AS ALERTA_ABANDONO,
                   V_VENTAS_PERDIDAS_ESTIMADAS AS VENTAS_PERDIDAS_ESTIMADAS,
                   SYSDATE AS FECHA_ACTUALIZACION
            FROM DUAL
        ) src ON (k.PERIODO = src.PERIODO AND k.TIPO_PERIODO = src.TIPO_PERIODO AND k.FECHA_ACTUALIZACION = src.FECHA_ACTUALIZACION)
        WHEN MATCHED THEN
            UPDATE SET 
                k.TOTAL_CARRITOS = src.TOTAL_CARRITOS,
                k.CARRITOS_CONVERTIDOS = src.CARRITOS_CONVERTIDOS,
                k.CARRITOS_ABANDONADOS = src.CARRITOS_ABANDONADOS,
                k.TASA_CONVERSION = src.TASA_CONVERSION,
                k.TASA_ABANDONO = src.TASA_ABANDONO,
                k.ALERTA_ABANDONO = src.ALERTA_ABANDONO,
                k.VENTAS_PERDIDAS_ESTIMADAS = src.VENTAS_PERDIDAS_ESTIMADAS
        WHEN NOT MATCHED THEN
            INSERT (KPI_7_ID, PERIODO, TIPO_PERIODO, TOTAL_CARRITOS, CARRITOS_CONVERTIDOS, 
                    CARRITOS_ABANDONADOS, TASA_CONVERSION, TASA_ABANDONO, TASA_CONVERSION_ANTERIOR,
                    VARIACION_TASA, TENDENCIA, ALERTA_ABANDONO, VENTAS_PERDIDAS_ESTIMADAS, FECHA_ACTUALIZACION)
            VALUES (KPI_7_SEQ.NEXTVAL, src.PERIODO, src.TIPO_PERIODO, src.TOTAL_CARRITOS, 
                    src.CARRITOS_CONVERTIDOS, src.CARRITOS_ABANDONADOS, src.TASA_CONVERSION, 
                    src.TASA_ABANDONO, src.TASA_CONVERSION_ANTERIOR, src.VARIACION_TASA, 
                    src.TENDENCIA, src.ALERTA_ABANDONO, src.VENTAS_PERDIDAS_ESTIMADAS, 
                    src.FECHA_ACTUALIZACION);
    END LOOP;

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('KPI_7 - Tasa de conversión de carritos calculada exitosamente.');
    DBMS_OUTPUT.PUT_LINE('Años procesados: ' || V_ANIOS.COUNT);
    
EXCEPTION
    WHEN OTHERS THEN 
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en KPI_7: ' || SQLERRM);
        RAISE;
END PROC_KPI7_TASA_CONVERSION_CARRITOS;
/
